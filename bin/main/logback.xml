<?xml version="1.0" encoding="UTF-8"?>
<configuration scan="true" scanPeriod="120 seconds">
	<!-- 로그 패턴에 색상 적용 %clr(pattern){color} -->
	<conversionRule conversionWord="clr" converterClass="org.springframework.boot.logging.logback.ColorConverter" />
  <timestamp key="byDay" datePattern="yyyyMMdd'T'HHmmss"/>
	<appender name="CONSOLE" class="ch.qos.logback.core.ConsoleAppender">
		<encoder>
			<!-- <Pattern>%d{HH:mm} %-5level %logger{36} - %msg%n</Pattern> -->
			 <Pattern>%d{yyyy-MM-dd HH:mm:ss}:%-3relative] %clr(%-5level) %clr(${PID:-}){magenta} %clr(---){faint} %clr([%15.15thread]){faint} %clr(%-40.40logger{36}){cyan} %clr(:){faint} %msg%n </Pattern>  
			  
		</encoder>
	</appender>
 
 	<appender name="FILES" class="ch.qos.logback.core.FileAppender">
 	  <file> /usr/local/monitoring_logs/monitoring.log</file>
      <append>true</append>
		<encoder>
			<!-- <Pattern>%d{HH:mm} %-5level %logger{36} - %msg%n</Pattern> -->
			 <Pattern>%d{yyyy-MM-dd HH:mm:ss} %logger{36} %msg%n </Pattern>  
			  
		</encoder>
	</appender>
	
	<appender name="FILE" class="ch.qos.logback.core.rolling.RollingFileAppender">

		<rollingPolicy class="ch.qos.logback.core.rolling.TimeBasedRollingPolicy">
			<fileNamePattern>/log/tomcat/API_LOG/kttddnsapi_catalina.out-%d{yyyy-MM-dd}.%i.log</fileNamePattern>
			<!-- <fileNamePattern>/tmp/access-%d{yyyy-MM-dd}.%i.log.zip</fileNamePattern> -->
			<timeBasedFileNamingAndTriggeringPolicy class="ch.qos.logback.core.rolling.SizeAndTimeBasedFNATP">
				<!-- or whenever the file size reaches 20MB -->
				<maxFileSize>250MB</maxFileSize>
			</timeBasedFileNamingAndTriggeringPolicy>

			<maxHistory>120</maxHistory>
			<totalSizeCap>15GB</totalSizeCap>
		</rollingPolicy>

		<encoder>
			<Pattern>%d{yyyy-MM-dd HH:mm:ss} %-5level %logger{36} - %msg%n</Pattern>
		</encoder>
	</appender>
	
	<appender name="SYSLOG" class="ch.qos.logback.classic.net.SyslogAppender">
        <syslogHost>127.0.0.1</syslogHost>
        <port>514</port>
        <facility>LOCAL0</facility>
    </appender>
    

	<appender name="FILE_KTTDDNS_CLIENT_ACCESSLOG" class="ch.qos.logback.core.rolling.RollingFileAppender">

		<rollingPolicy class="ch.qos.logback.core.rolling.TimeBasedRollingPolicy">
			<fileNamePattern>/log/tomcat/API_LOG/kttddnsapi_KTTDDNS_CLIENT_ACCESSLOG-%d{yyyy-MM-dd}.%i.log.zip</fileNamePattern>
			<!-- <fileNamePattern>/tmp/access-%d{yyyy-MM-dd}.%i.log.zip</fileNamePattern> -->
			<timeBasedFileNamingAndTriggeringPolicy class="ch.qos.logback.core.rolling.SizeAndTimeBasedFNATP">
				<!-- or whenever the file size reaches 20MB -->
				<maxFileSize>125MB</maxFileSize>
			</timeBasedFileNamingAndTriggeringPolicy>

			<maxHistory>120</maxHistory>
			<totalSizeCap>1GB</totalSizeCap>
		</rollingPolicy>

		<encoder>
			<Pattern>%d{yyyy-MM-dd HH:mm:ss},	%msg%n</Pattern>
		</encoder>
	</appender>
	
	<appender name="FILE_KTTDDNS_INFECTION_LOG" class="ch.qos.logback.core.rolling.RollingFileAppender">

		<rollingPolicy class="ch.qos.logback.core.rolling.TimeBasedRollingPolicy">
			<fileNamePattern>/log/tomcat/API_LOG/kttddnsapi_KTTDDNS_INFECTION_LOG-%d{yyyy-MM-dd}.%i.log.zip</fileNamePattern>
			<!-- <fileNamePattern>/tmp/access-%d{yyyy-MM-dd}.%i.log.zip</fileNamePattern> -->
			<timeBasedFileNamingAndTriggeringPolicy class="ch.qos.logback.core.rolling.SizeAndTimeBasedFNATP">
				<!-- or whenever the file size reaches 20MB -->
				<maxFileSize>125MB</maxFileSize>
			</timeBasedFileNamingAndTriggeringPolicy>
			<maxHistory>31</maxHistory>
			<totalSizeCap>1GB</totalSizeCap>
		</rollingPolicy>

		<encoder>
			<Pattern>%d{yyyy-MM-dd HH:mm:ss},	%msg%n</Pattern>
		</encoder>
	</appender>
	<!-- log4jdbc 옵션 설정 -->
	<logger name="jdbc" level="OFF" /> <!-- 커넥션 open close 이벤트를 로그로 남긴다. -->
	<logger name="jdbc.connection" level="OFF" /> <!-- SQL문만을 로그로 남기며, PreparedStatement일 경우 관련된 argument 값으로 대체된 SQL문이 보여진다. -->
	<logger name="jdbc.sqlonly" level="OFF" /> <!-- SQL문과 해당 SQL을 실행시키는데 수행된 시간 정보(milliseconds)를 포함한다. -->
	<logger name="jdbc.sqltiming" level="DEBUG" /> <!-- ResultSet을 제외한 모든 JDBC 호출 정보를 로그로 남긴다. 많은 양의 로그가 생성되므로 특별히 JDBC 문제를 추적해야 할 필요가 있는 경우를 제외하고는 사용을 권장하지 않는다. -->
	<logger name="jdbc.audit" level="OFF" /> <!-- ResultSet을 포함한 모든 JDBC 호출 정보를 로그로 남기므로 매우 방대한 양의 로그가 생성된다. -->
	<logger name="jdbc.resultset" level="OFF" /> <!-- SQL 결과 조회된 데이터의 table을 로그로 남긴다. -->
	<logger name="jdbc.resultsettable" level="OFF" />
	
<!-- 	<logger name="com.zaxxer.hikari" level="info"   additivity="false"/> -->
	<logger name="org.springframework" level="debug"  additivity="false"/>
	<logger name="org.springframework.web" level="debug"  additivity="false"/>
	<!-- <logger name="com.infra" level="debug"/> -->
	<logger name="org.apache.http" level="INFO"   additivity="false"/>
	<!-- <logger name="org.elasticsearch" level="INFO"/> -->
 	<logger name="CLIENT_ACCESSLOG" level="debug" additivity="false">
	<appender-ref ref="FILE_KTTDDNS_CLIENT_ACCESSLOG" /> 
	</logger>
	 <logger name="INFECTION_LOG" level="debug" additivity="false">
	<appender-ref ref="FILE_KTTDDNS_INFECTION_LOG" /> 
	</logger>
	<logger name="com.kttddnsapi.controller.ApiController" level="debug" >
	<appender-ref ref="FILE" /> 
	</logger>
	
	<logger name="kttReport" level="debug" >
	<appender-ref ref="SYSLOG" /> 
	</logger>
	 
	<root level="debug">
		<appender-ref ref="CONSOLE" />
 	
	</root>

	<logger name="org.mybatis" level="debug"  additivity="false" />  

</configuration>